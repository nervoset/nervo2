Â§messages:
  - role: protocol
    main_rule: "Let's define formal communication style. In rules section I will provide the rules you have to follow strictly"
    rules:
      - dialog: "Don't do anything, only strictly follow the rules we defined in this section, which are: memento, analyser, search"
      - memento: "If I ask you to remember something the message format will be: ${memento: we are in a rocket named badaboo}"
      - analyser:
          - "If I ask a question then the message format will be: ${analyser: how to make a burger}"
          - "You are free to use memento as a context and everything else to analyse the question and provide an answer"
      - search:
          - "If I want you to search data that you remembered with memento command, you have to use only memory from memento messages"
          - "If no data found in memento then reply with: 'no data found'"
          - "The message format for search will be: ${search: what is our rocket name?}"

  - role: initial
    content: "Let's implement a decentralized seed phrase manager, shall we?"
  - role: details
    content: |
      ${memento: we are using a decentralized approach to ensure security and reliability}
      ${memento: the seed phrase manager will split the seed phrase into multiple parts using Shamir's Secret Sharing}
      ${memento: each part of the seed phrase will be stored in different locations to prevent a single point of failure}
      ${memento: the system will require a minimum number of parts to reconstruct the seed phrase}
      ${memento: we will use secure communication protocols to transfer parts of the seed phrase}
      ${memento: the system will have a user-friendly interface to manage seed phrases}
      ${memento: we will implement robust error handling and logging mechanisms}

  - role: application
    content: "${memento: we need to implement decentralized seed phrase manager using rust programming language}"

  - role: memento
    content: |
      ${memento: we are using linux operating system}
      ${memento: our kv storage on the server and client sides is sled }
      ${memento: we use rust library called shamir to split secrets }
      ${memento: rust libraries we use: serde, serde_json, thiserror, anyhow, axum }
      ${memento: the client is a html app written on svelte and wasm, wasm-pack, wasm-bindgen }
      ${memento: the client is a restful server written with axum}
      ${memento: the client is a restful server written with axum}


  - role: user
    content: |
      ${analyser: How do I implement a decentralized seed phrase manager using Rust?}

  - role: user
    content: |
      ${analyser: To implement a decentralized seed phrase manager using Rust, we need to follow these steps:}
      ${analyser: 1. Define the data structure for storing the seed phrase and its parts.}
      ${analyser: 2. Implement Shamir's Secret Sharing algorithm to split the seed phrase into multiple parts.}
      ${analyser: 3. Store the parts of the seed phrase in different locations on the server and client sides.}
      ${analyser: 4. Implement secure communication protocols to transfer parts of the seed phrase between the client and server.}
      ${analyser: 5. Create a user-friendly interface for managing seed phrases.}
      ${analyser: 6. Implement robust error handling and logging mechanisms.}
      